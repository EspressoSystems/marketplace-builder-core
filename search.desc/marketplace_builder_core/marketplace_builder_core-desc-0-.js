searchState.loadedDescShard("marketplace_builder_core", 0, "Response Message to be put on the response channel\nBuilder State to hold the state of the builder\nDA Proposal Message to be put on the da proposal channel\nDecide Message to be put on the decide channel\nUnifies the possible messages that can be received by the …\nQC Message to be put on the quorum proposal channel\nRequest Message to be put on the request channel\nResponse Message to be put on the response channel\nEnum to hold the status out of the decide event\nEnum to hold the different sources of the transaction\nconstant fee that the builder will offer per byte of data …\nlocally spawned builder Commitements\nthe spawned from info for a builder state\nda_proposal_payload_commit to (da_proposal, node_count)\nda proposal receiver\ndecide receiver\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nglobal state handle, defined in the service.rs\ninstance state to enfoce max_block_size\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntimeout for maximising the txns in the block\nquorum proposal receiver\nquorum_proposal_payload_commit to quorum_proposal\nchannel receiver for the block requests\nfiltered queue of available transactions, taken from …\nincoming stream of transactions\ntxns currently in the tx_queue\nvalidated state that is required for a proposal to be …\nThe channel is empty and closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\nThe channel has overflowed since the last element was …\nThe channel has overflowed since the last element was …\nAn error returned from <code>Receiver::recv()</code>.\nAn error returned from <code>Receiver::try_recv()</code>.\nCreate a new broadcast channel.\nFor the DA proposal.\nFor the DA proposal.\nFor the decide.\nFor the decide.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns a tide_disco <code>App</code> with builder …\nReturns <code>true</code> if the channel is empty and closed.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if this error indicates the receiver missed …\nFor the quorum proposal.\nFor the quorum proposal.\nRun builder service, Refer to documentation for …\nFor transactions, shared.\nFor transactions, shared.\nA wrapper around event streaming API that provides …\nA set that allows for time-based garbage collection, …\nEstablish initial connection to the events service at …\nReturns <code>true</code> if the key is contained in the set\nForce garbage collection, even if the time elapsed since …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a <code>key</code> into the set. Doesn’t trigger garbage …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>RotatingSet</code>\nTrigger garbage collection.")